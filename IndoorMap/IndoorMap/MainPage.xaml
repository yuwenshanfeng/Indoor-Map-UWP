<mvvm:MVVMPage
    x:Class="IndoorMap.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:IndoorMap"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:mvvm="using:MVVMSidekick.Views"
    xmlns:vm="using:IndoorMap.ViewModels"
    xmlns:maps="using:Windows.UI.Xaml.Controls.Maps"
    xmlns:usercontrol="using:IndoorMap.UserControls"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:bahavior="using:MVVMSidekick.Behaviors"
    mc:Ignorable="d">
    
    <Page.Resources>
        <!-- TODO: Delete this line if the key AppName is declared in App.xaml -->
        <x:String x:Key="AppName">室内地图</x:String>
        
        <vm:MainPage_Model x:Key="DesignVM"/>
        
        <Style TargetType="ListViewItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        </Style>
         
        <DataTemplate x:Key="CityListDataTemplate">
            <Grid>
                <TextBlock Text="{Binding name}"/>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="PaneListDataTemplate">
            <Grid Background="Green" HorizontalAlignment="Stretch">
                <!--<interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="Tapped">
                        <bahavior:SendToEventRouterAction EventRoutingName="SplitViewPaneItemClick"
                                                          IsEventFiringToAllBaseClassesChannels="True"
                                                          EventData="{Binding}"/>
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>-->

                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="48"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <!--<Button Grid.Column="0" HorizontalAlignment="Center">
                    <Button.Content>
                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="{Binding IconText}" FontSize="24"/>
                    </Button.Content>
                </Button>-->

                <TextBlock FontFamily="Segoe MDL2 Assets"  Grid.Column="0" HorizontalAlignment="Center" Text="{Binding Icon}" FontSize="24"/>
                <Border Grid.Column="1" >
                    <TextBlock Text="{Binding Label}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                </Border>
            </Grid>
        </DataTemplate>
         
    </Page.Resources>
    <Grid Margin="0,0,0,0" >
        <interactivity:Interaction.Behaviors>
            <core:EventTriggerBehavior x:Name="Loaded">
                <core:InvokeCommandAction Command="{Binding CommandGridLoaded}"/>
            </core:EventTriggerBehavior>
        </interactivity:Interaction.Behaviors>
        <SplitView HorizontalAlignment="Stretch" x:Name="splitView" IsPaneOpen="{Binding IsHumburgShow, Mode=TwoWay}" OpenPaneLength="100" CompactPaneLength="50" Background="Brown" PaneBackground="Red" DisplayMode="Overlay" DataContext="{StaticResource DesignVM}" >
            <SplitView.Pane>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" Background="DarkCyan">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="3*"/>
                        </Grid.ColumnDefinitions>
                        <Button Content="&#xE700;" FontFamily="Segoe MDL2 Assets" Grid.Column="0" HorizontalAlignment="Center" Command="{Binding CommandHamburgClick}"/>
                    </Grid>
                    <Grid Grid.Row="1" Background="DarkOrchid">
                        <ListView Grid.Row="2"
                              ItemTemplate="{StaticResource PaneListDataTemplate}" 
                              ItemsSource="{Binding PaneDownList}" 
                              SelectedItem="{Binding SelectedPaneDownItem, Mode=TwoWay}"
                              SelectionMode="Single"
                              IsItemClickEnabled="False"
                              SelectedIndex="{Binding SelectedPaneDownIndex, Mode=TwoWay}"
                              Background="Gray">
                            <!--<ItemsPanelTemplate>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsPanelTemplate>-->

                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="SelectionChanged">
                                    <core:InvokeCommandAction Command="{Binding CommandPaneItemChanged}" CommandParameter="{Binding SelectedPaneDownItem}"/>
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>
                        </ListView>
                    </Grid>
                    <Button Grid.Row="2" Content="设置" Command="{Binding CommandGoToSettingPage}" VerticalAlignment="Bottom"/>
                </Grid>
            </SplitView.Pane>

            <SplitView.Content>
                <RelativePanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

                    <RelativePanel Visibility="{Binding MainVisibility}" x:Name="rpMain" Background="BurlyWood">
                        <Grid x:Name="topGrid" Width="500" RelativePanel.AlignRightWithPanel="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" x:Name="tbAppName" FontSize="24" Text="{StaticResource AppName}" VerticalAlignment="Center"/>
                            <AutoSuggestBox  Grid.Column="1" 
                                x:Name="autoSuggestBox"
                                        ItemsSource="{Binding AutoSuggests}" 
                                        TextMemberPath ="name"
                                        PlaceholderText="搜索"  
                                        
                                        Text="{Binding AutoSuggestText, Mode=TwoWay}"
                                        HorizontalAlignment="Stretch" QueryIcon="Find" >
                                <AutoSuggestBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding name}"/>
                                    </DataTemplate>
                                </AutoSuggestBox.ItemTemplate>
                                <interactivity:Interaction.Behaviors>
                                    <core:EventTriggerBehavior EventName="TextChanged">
                                        <core:InvokeCommandAction Command="{Binding CommandAutoSuggestionTextChange}"/>
                                    </core:EventTriggerBehavior>
                                    <core:EventTriggerBehavior EventName="QuerySubmitted">
                                        <core:InvokeCommandAction Command="{Binding CommandAutoSuggestionSubmitted}"/>
                                    </core:EventTriggerBehavior>
                                </interactivity:Interaction.Behaviors>
                            </AutoSuggestBox>
                        </Grid>
                        <ComboBox
                                  RelativePanel.Below="topGrid"
                                  RelativePanel.AlignRightWith="topGrid"  
                                  CompositeMode="MinBlend" 
                                  Background="IndianRed"
                                  BorderThickness="0"  
                                  HorizontalAlignment="Stretch"
                                  x:Name="cbCity"  
                                  SelectedIndex="{Binding SelectedCityIndex}"
                                  SelectedItem="{Binding SelectedCity, Mode=TwoWay}" 
                                  ItemsSource="{Binding SupportCities}"
                                  ItemTemplate="{StaticResource CityListDataTemplate}">
                            <!--<interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="SelectionChanged">
                                    <bahavior:SendToEventRouterAction EventRoutingName="CitySelectedChangedEvent"
                                                          IsEventFiringToAllBaseClassesChannels="True"
                                                          EventData="{Binding SelectedCity}"/>
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>-->
                            <interactivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="SelectionChanged">
                                    <core:InvokeCommandAction Command="{Binding CommandCityChanged}" CommandParameter="{Binding SelectedCityIndex}"/>
                                </core:EventTriggerBehavior>
                            </interactivity:Interaction.Behaviors>

                        </ComboBox>
                        <Frame Height="600"
                            x:Name="frameSplitContent"
                            RelativePanel.Below="cbCity"
                            RelativePanel.AlignRightWithPanel="True"
                            RelativePanel.AlignLeftWithPanel="True"
                            mvvm:StageManager.Beacon="frameMain"/>
                    </RelativePanel>

                    <Frame Navigated="frameAtals_Navigated"
                           Visibility="{Binding FrameVisibility}"
                           x:Name="frameAtals"
                           Background="Blue"    
                           mvvm:StageManager.Beacon="frameSub">
                        
                    </Frame>
                </RelativePanel>
            </SplitView.Content>
        </SplitView>
        
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="WideState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="720"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                        <Setter Target="splitView.IsPaneOpen" Value="false"/>
                        <Setter Target="splitView.DisplayMode" Value="CompactOverlay"/>
 
                        <Setter Target="tbAppName.Visibility" Value="Collapsed"/>

                        <Setter Target="commandBar.Visibility" Value="Collapsed"/>

                        <Setter Target="rpMain.(RelativePanel.AlignLeftWithPanel)" Value="True"/>
                        <Setter Target="rpMain.MaxWidth" Value="500"/>
                        <Setter Target="rpMain.Visibility" Value="Visible"/>

                        <Setter Target="frameAtals.(RelativePanel.RightOf)" Value="rpMain"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignRightWithPanel)" Value="True"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignTopWithPanel)" Value="True"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignBottomWithPanel)" Value="True"/>

                    </VisualState.Setters>
                </VisualState>
 
                <VisualState x:Name="MiddleState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="501"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--SplitView-->
                        <Setter Target="splitView.IsPaneOpen" Value="false"/>
                        <Setter Target="splitView.DisplayMode" Value="CompactOverlay"/>
 
                        <Setter Target="tbAppName.Visibility" Value="Collapsed"/>

                        <Setter Target="commandBar.Visibility" Value="Collapsed"/>

                        <Setter Target="rpMain.(RelativePanel.AlignLeftWithPanel)" Value="True"/>
                        <Setter Target="rpMain.MaxWidth" Value="500"/>
                        <Setter Target="rpMain.Visibility" Value="Visible"/>

                        
                        <Setter Target="frameAtals.(RelativePanel.RightOf)" Value="rpMain"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignRightWithPanel)" Value="True"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignTopWithPanel)" Value="True"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignBottomWithPanel)" Value="True"/>

                    </VisualState.Setters>
                </VisualState>
                
                <VisualState x:Name="NarrowState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                        <Setter Target="splitView.IsPaneOpen" Value="false"/>
                        <Setter Target="splitView.DisplayMode" Value="Overlay"/>

                        <Setter Target="tbAppName.Visibility" Value="Visible"/>

                        <Setter Target="commandBar.Visibility" Value="Visible"/>

                        <Setter Target="rpMain.(RelativePanel.AlignLeftWithPanel)" Value="True"/>
                        <Setter Target="rpMain.MaxWidth" Value="500"/>
                        

                        <Setter Target="frameAtals.MinWidth" Value="500"/>
                        <Setter Target="frameAtals.(RelativePanel.RightOf)" Value="rpMain"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignRightWithPanel)" Value="True"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignTopWithPanel)" Value="True"/>
                        <Setter Target="frameAtals.(RelativePanel.AlignBottomWithPanel)" Value="True"/>
  
                    </VisualState.Setters>
                </VisualState>

            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>

    <Page.DataContext>
        <Binding  RelativeSource="{RelativeSource Mode=Self}" Path="ViewModel"/>
    </Page.DataContext>
    <mvvm:MVVMPage.ViewModel>
        <Binding Source="{StaticResource DesignVM}" />
    </mvvm:MVVMPage.ViewModel>
    <mvvm:MVVMPage.BottomAppBar>
        <CommandBar x:Name="commandBar" d:DataContext="{StaticResource DesignVM}">
            <CommandBar.PrimaryCommands >
                <AppBarButton x:Name="appbarLocate" Icon="Map" Label="定位" Command="{Binding CommandGeoLocation}"/>
                <AppBarButton x:Name="appbarSetting" Icon="Setting" Label="设置" Command="{Binding CommandGoToSettingPage}"/>
                <AppBarButton x:Name="appbarRefresh" Icon="Refresh" Label="刷新" Command="{Binding CommandGoToRefreshPage}"/>
            </CommandBar.PrimaryCommands>
            <CommandBar.SecondaryCommands>
                <AppBarButton Label="五星好评呀" Foreground="Black"/>
                <AppBarButton HorizontalAlignment="Stretch" Label="反馈" Foreground="Black"/>
            </CommandBar.SecondaryCommands>
        </CommandBar>
    </mvvm:MVVMPage.BottomAppBar>

</mvvm:MVVMPage>
